package com.spring.fortress.vehicles.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.Year;

/**
 * Entity class representing a vehicle in the system.
 * <p>
 * This class maps to the "vehicles" table in the database and contains
 * all the vehicle-related information such as chassis number, manufacturer,
 * price, etc. Each vehicle may be associated with an owner.
 * </p>
 *
 * @author Fortress Backend
 * @version 1.0
 * @since 1.0
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "vehicles")
public class Vehicle {
    /**
     * The unique identifier for the vehicle.
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;

    /**
     * The unique chassis number (VIN) of the vehicle.
     * This value must be unique across all vehicles.
     */
    @Column(name = "chassis_number", unique = true, nullable = false)
    private String chassisNumber;

    /**
     * The manufacturer/brand of the vehicle.
     */
    @Column(name = "manufacturer", nullable = false)
    private String manufacturer;

    /**
     * The year the vehicle was manufactured.
     * Using Year class for better semantic representation.
     */
    @Column(name = "manufactured_year", nullable = false)
    private Integer manufacturedYear;

    /**
     * The price of the vehicle.
     */
    @Column(name = "price", nullable = false)
    private Double price;

    /**
     * The model name of the vehicle.
     */
    @Column(name = "model_name", nullable = false)
    private String modelName;

    /**
     * The owner of the vehicle.
     * Many vehicles can belong to one owner.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "owner_id")
    @JsonIgnore
    private Owner owner;

    /**
     * The license plate assigned to the vehicle.
     * One-to-one relationship with the Plate entity.
     */
    @OneToOne(mappedBy = "vehicle", cascade = CascadeType.ALL)
    @JsonIgnore
    private Plate plate;
}